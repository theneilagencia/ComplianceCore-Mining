name: Weekly QA - QIVO Mining

on:
  schedule:
    # Toda sexta-feira √†s 18h BRT (21h UTC)
    - cron: '0 21 * * 5'
  
  # Permite execu√ß√£o manual via GitHub UI
  workflow_dispatch:

jobs:
  qa-automation:
    name: QA Autom√°tico Semanal
    runs-on: ubuntu-latest
    
    steps:
      # 1. Checkout do c√≥digo
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Hist√≥rico completo para versionamento
      
      # 2. Setup Node.js
      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
      
      # 3. Instalar depend√™ncias
      - name: üì¶ Install dependencies
        run: |
          npm ci
          cd client && npm ci
      
      # 4. Lint check
      - name: üîç Run ESLint
        run: |
          npm run lint || echo "‚ö†Ô∏è ESLint warnings found"
      
      # 5. TypeScript check
      - name: üìò TypeScript check
        run: |
          npm run type-check || npx tsc --noEmit
      
      # 6. Build check
      - name: üèóÔ∏è Build check
        run: |
          cd client && npm run build
      
      # 7. Security audit
      - name: üîê Security audit
        run: |
          npm audit --audit-level=high || echo "‚ö†Ô∏è Security vulnerabilities found"
      
      # 8. Check outdated dependencies
      - name: üìä Check outdated dependencies
        run: |
          npm outdated || echo "‚ö†Ô∏è Outdated dependencies found"
      
      # 9. Run unit tests (se existirem)
      - name: üß™ Run unit tests
        run: |
          npm test || echo "‚ö†Ô∏è No tests configured yet"
        continue-on-error: true
      
      # 10. Gerar relat√≥rio de QA
      - name: üìù Generate QA report
        run: |
          echo "# QA Report - $(date +%Y-%m-%d)" > qa-report.md
          echo "" >> qa-report.md
          echo "## Build Status" >> qa-report.md
          echo "‚úÖ Build successful" >> qa-report.md
          echo "" >> qa-report.md
          echo "## Dependencies" >> qa-report.md
          npm list --depth=0 >> qa-report.md || true
          echo "" >> qa-report.md
          echo "## Security" >> qa-report.md
          npm audit >> qa-report.md || true
      
      # 11. Upload QA report como artifact
      - name: üì§ Upload QA report
        uses: actions/upload-artifact@v4
        with:
          name: qa-report-${{ github.run_number }}
          path: qa-report.md
      
      # 12. Notificar sucesso
      - name: ‚úÖ QA completed
        run: |
          echo "‚úÖ Weekly QA completed successfully"
          echo "üìä Report available in artifacts"
          echo "üîó https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

  # Job separado para atualizar documenta√ß√£o (apenas se QA passar)
  update-docs:
    name: Atualizar Documenta√ß√£o
    runs-on: ubuntu-latest
    needs: qa-automation
    if: success()
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      
      - name: üìù Update QA documentation
        run: |
          # Atualizar data no QA_REPORT.md
          sed -i "s/\*\*Data:\*\* .*/\*\*Data:\*\* $(date +%d\ de\ %B\ de\ %Y)/" docs/QA_REPORT.md || true
          
          # Criar entrada no CHANGELOG
          if [ ! -f CHANGELOG.md ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi
          
          echo "## [Weekly QA] - $(date +%Y-%m-%d)" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### QA Autom√°tico" >> CHANGELOG.md
          echo "- ‚úÖ Build check passed" >> CHANGELOG.md
          echo "- ‚úÖ TypeScript check passed" >> CHANGELOG.md
          echo "- ‚úÖ Security audit completed" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
      
      - name: üè∑Ô∏è Bump version (patch)
        run: |
          # Incrementar vers√£o patch no package.json
          npm version patch --no-git-tag-version || true
      
      - name: üì§ Commit and push changes
        run: |
          git config user.name "QIVO QA Bot"
          git config user.email "qa@qivomining.com"
          git add .
          git commit -m "chore(qa): weekly automated QA - $(date +%Y-%m-%d)" || echo "No changes to commit"
          git push || echo "Nothing to push"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job para notifica√ß√£o inteligente (Email + WhatsApp + Log)
  notify:
    name: Notificar Resultado (Email + WhatsApp)
    runs-on: ubuntu-latest
    needs: [qa-automation, update-docs]
    if: always()
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: üîß Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: üì¶ Install dependencies
        run: pip install requests
      
      - name: üîî Send notifications (Email + WhatsApp + Log)
        run: python backend/jobs/notify_qa.py
        env:
          QA_STATUS: ${{ needs.qa-automation.result }}
          QA_PARTIAL: ${{ needs.qa-automation.outputs.has_warnings || '0' }}
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
          EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
          EMAIL_TO: ${{ secrets.EMAIL_TO }}
          TWILIO_SID: ${{ secrets.TWILIO_SID }}
          TWILIO_TOKEN: ${{ secrets.TWILIO_TOKEN }}
          WHATSAPP_FROM: ${{ secrets.WHATSAPP_FROM }}
          WHATSAPP_TO: ${{ secrets.WHATSAPP_TO }}
          GUPSHUP_API: ${{ secrets.GUPSHUP_API }}
          GUPSHUP_KEY: ${{ secrets.GUPSHUP_KEY }}
          GUPSHUP_APP: ${{ secrets.GUPSHUP_APP }}
          REPO_URL: ${{ vars.REPO_URL || 'https://github.com/theneilagencia/ComplianceCore-Mining' }}
          PROD_URL: ${{ vars.PROD_URL || 'https://qivo-mining.onrender.com' }}
      
      - name: üì§ Commit log updates
        run: |
          git config user.name "QIVO QA Bot"
          git config user.email "qa@qivomining.com"
          git add docs/QA_STATUS_LOG.md
          git commit -m "chore(qa): update QA status log - $(date +%Y-%m-%d)" || echo "No changes to commit"
          git push || echo "Nothing to push"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

